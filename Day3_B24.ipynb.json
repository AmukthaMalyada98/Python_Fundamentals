{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# f strings\n",
    "\n",
    "# syntax: \n",
    "#x = f\"Hello, {placeholder1} {placeholder2}\" #Curly braces are used for refernce variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "firstname = 'amuktha'\n",
    "\n",
    "lastname = 'malyada'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "amuktha malyada\n"
     ]
    }
   ],
   "source": [
    "full_name = f\"{firstname} {lastname}\"\n",
    "\n",
    "print(full_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Amuktha Malyada\n"
     ]
    }
   ],
   "source": [
    "# Enhancement using title case\n",
    "\n",
    "print(full_name.title())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello amuktha malyada\n"
     ]
    }
   ],
   "source": [
    "# Further enhancement\n",
    "\n",
    "print('Hello',full_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello,Amuktha Malyada\n"
     ]
    }
   ],
   "source": [
    "print(f\"Hello,{full_name.title()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For adding whitespaces we use \\n and \\t delimeters where\n",
    "#  \\n is for new line\n",
    "# \\t is for tab space"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "favourite_subjects:PythonJavaCC++SwiftGolang\n"
     ]
    }
   ],
   "source": [
    "print('favourite_subjects:PythonJavaCC++SwiftGolang')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "favourite_subjects:\n",
      "Python\n",
      "Java\n",
      "C\n",
      "C++\n",
      "Swift\n",
      "Golang\n"
     ]
    }
   ],
   "source": [
    "#Further Enhancement\n",
    "\n",
    "print('favourite_subjects:\\nPython\\nJava\\nC\\nC++\\nSwift\\nGolang')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "favourite_subjects:\n",
      "\tPython\n",
      "\tJava\n",
      "\tC\n",
      "\tC++\n",
      "\tSwift\n",
      "\tGolang\n"
     ]
    }
   ],
   "source": [
    "#Further Enhancement\n",
    "\n",
    "print('favourite_subjects:\\n\\tPython\\n\\tJava\\n\\tC\\n\\tC++\\n\\tSwift\\n\\tGolang')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
